[{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/app.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":13,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport authRoute from \"./routes/auth.route.js\";\nimport postRoute from \"./routes/post.route.js\";\nimport testRoute from \"./routes/test.route.js\";\nimport userRoute from \"./routes/user.route.js\";\nimport chatRoute from \"./routes/chat.route.js\";\nimport messageRoute from \"./routes/message.route.js\";\n\nconst app = express();\n\napp.use(cors({ origin: process.env.CLIENT_URL, credentials: true }));\napp.use(express.json());\napp.use(cookieParser());\n\napp.use(\"/api/auth\", authRoute);\napp.use(\"/api/users\", userRoute);\napp.use(\"/api/posts\", postRoute);\napp.use(\"/api/test\", testRoute);\napp.use(\"/api/chats\", chatRoute);\napp.use(\"/api/messages\", messageRoute);\n\n// Start server\napp.listen(8800, '0.0.0.0', () => {\n  console.log('API server running on port 8800');\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/controllers/auth.controller.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":62,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'userPassword' is assigned a value but never used.","line":66,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"userPassword"},"fix":{"range":[1565,1588],"text":""},"desc":"Remove unused variable 'userPassword'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport prisma from \"../lib/prisma.js\";\n\nexport const register = async (req, res) => {\n  const { username, email, password } = req.body;\n\n  try {\n    // HASH THE PASSWORD\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    console.log(hashedPassword);\n\n    // CREATE A NEW USER AND SAVE TO DB\n    const newUser = await prisma.user.create({\n      data: {\n        username,\n        email,\n        password: hashedPassword,\n      },\n    });\n\n    console.log(newUser);\n\n    res.status(201).json({ message: \"User created successfully\" });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to create user!\" });\n  }\n};\n\nexport const login = async (req, res) => {\n  const { username, password } = req.body;\n\n  try {\n    // CHECK IF THE USER EXISTS\n\n    const user = await prisma.user.findUnique({\n      where: { username },\n    });\n\n    if (!user) return res.status(400).json({ message: \"Invalid Credentials!\" });\n\n    // CHECK IF THE PASSWORD IS CORRECT\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordValid)\n      return res.status(400).json({ message: \"Invalid Credentials!\" });\n\n    // GENERATE COOKIE TOKEN AND SEND TO THE USER\n\n    // res.setHeader(\"Set-Cookie\", \"test=\" + \"myValue\").json(\"success\")\n    const age = 1000 * 60 * 60 * 24 * 7;\n\n    const token = jwt.sign(\n      {\n        id: user.id,\n        isAdmin: false,\n      },\n      process.env.JWT_SECRET_KEY,\n      { expiresIn: age }\n    );\n\n    const { password: userPassword, ...userInfo } = user;\n\n    res\n      .cookie(\"token\", token, {\n        httpOnly: true,\n        // secure:true,\n        maxAge: age,\n      })\n      .status(200)\n      .json(userInfo);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to login!\" });\n  }\n};\n\nexport const logout = (req, res) => {\n  res.clearCookie(\"token\").status(200).json({ message: \"Logout Successful\" });\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/controllers/chat.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/controllers/message.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/controllers/post.controller.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":51,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import prisma from \"../lib/prisma.js\";\nimport jwt from \"jsonwebtoken\";\n\nexport const getPosts = async (req, res) => {\n  const query = req.query;\n\n  try {\n    const posts = await prisma.post.findMany({\n      where: {\n        city: query.city || undefined,\n        type: query.type || undefined,\n        property: query.property || undefined,\n        bedroom: parseInt(query.bedroom) || undefined,\n        price: {\n          gte: parseInt(query.minPrice) || undefined,\n          lte: parseInt(query.maxPrice) || undefined,\n        },\n      },\n    });\n\n    // setTimeout(() => {\n    res.status(200).json(posts);\n    // }, 3000);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to get posts\" });\n  }\n};\n\nexport const getPost = async (req, res) => {\n  const id = req.params.id;\n  try {\n    const post = await prisma.post.findUnique({\n      where: { id },\n      include: {\n        postDetail: true,\n        user: {\n          select: {\n            username: true,\n            avatar: true,\n          },\n        },\n      },\n    });\n\n    const token = req.cookies?.token;\n\n    if (token) {\n      return jwt.verify(\n        token,\n        process.env.JWT_SECRET_KEY,\n        async (err, payload) => {\n          // ✅ Add return to prevent further execution\n          if (!err) {\n            const saved = await prisma.savedPost.findUnique({\n              where: {\n                userId_postId: {\n                  postId: id,\n                  userId: payload.id,\n                },\n              },\n            });\n            return res\n              .status(200)\n              .json({ ...post, isSaved: saved ? true : false }); // ✅ Use return here\n          }\n          return res.status(200).json({ ...post, isSaved: false }); // ✅ Also return here\n        }\n      );\n    }\n\n    return res.status(200).json({ ...post, isSaved: false }); // ✅ Return the response to prevent double execution\n  } catch (err) {\n    console.log(err);\n    return res.status(500).json({ message: \"Failed to get post\" });\n  }\n};\n\nexport const addPost = async (req, res) => {\n  const body = req.body;\n  const tokenUserId = req.userId;\n\n  try {\n    const newPost = await prisma.post.create({\n      data: {\n        ...body.postData,\n        userId: tokenUserId,\n        postDetail: {\n          create: body.postDetail,\n        },\n      },\n    });\n    res.status(200).json(newPost);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to create post\" });\n  }\n};\n\nexport const updatePost = async (req, res) => {\n  const id = req.params.id;\n  const tokenUserId = req.userId;\n  const { postData, postDetail } = req.body;\n\n  try {\n    // Find the post to ensure it exists and that the user is authorized.\n    const existingPost = await prisma.post.findUnique({ where: { id } });\n    if (!existingPost) {\n      return res.status(404).json({ message: \"Post not found\" });\n    }\n    if (existingPost.userId !== tokenUserId) {\n      return res.status(403).json({ message: \"Not Authorized!\" });\n    }\n\n    // Update the post along with its postDetail\n    const updatedPost = await prisma.post.update({\n      where: { id },\n      data: {\n        ...postData,\n        postDetail: {\n          update: { ...postDetail },\n        },\n      },\n      include: { postDetail: true },\n    });\n\n    res.status(200).json(updatedPost);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"Failed to update post\" });\n  }\n};\n\nexport const deletePost = async (req, res) => {\n  const { id } = req.params;\n  const tokenUserId = req.userId; // Set by verifyToken middleware\n\n  try {\n    // Fetch the post along with its postDetail relation\n    const post = await prisma.post.findUnique({\n      where: { id },\n      include: { postDetail: true },\n    });\n\n    if (!post) {\n      console.log(\"Post not found:\", id);\n      return res.status(404).json({ message: \"Post not found\" });\n    }\n\n    if (post.userId !== tokenUserId) {\n      console.log(`User ${tokenUserId} is not authorized to delete post ${id}`);\n      return res.status(403).json({ message: \"Not Authorized!\" });\n    }\n\n    // If the post has a related PostDetail, delete it first\n    if (post.postDetail) {\n      await prisma.postDetail.delete({\n        where: { postId: id },\n      });\n    }\n\n    // Now delete the Post\n    await prisma.post.delete({\n      where: { id },\n    });\n\n    console.log(`Post ${id} deleted by user ${tokenUserId}`);\n    return res.status(200).json({ message: \"Post deleted\" });\n  } catch (err) {\n    console.error(\"Error deleting post:\", err);\n    return res.status(500).json({ message: \"Failed to delete post\" });\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/controllers/test.controller.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":13,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jwt from \"jsonwebtoken\";\n\nexport const shouldBeLoggedIn = async (req, res) => {\n  console.log(req.userId)\n  res.status(200).json({ message: \"You are Authenticated\" });\n};\n\nexport const shouldBeAdmin = async (req, res) => {\n  const token = req.cookies.token;\n\n  if (!token) return res.status(401).json({ message: \"Not Authenticated!\" });\n\n  jwt.verify(token, process.env.JWT_SECRET_KEY, async (err, payload) => {\n    if (err) return res.status(403).json({ message: \"Token is not Valid!\" });\n    if (!payload.isAdmin) {\n      return res.status(403).json({ message: \"Not authorized!\" });\n    }\n  });\n\n  res.status(200).json({ message: \"You are Authenticated\" });\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/controllers/user.controller.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'userPassword' is assigned a value but never used.","line":51,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"userPassword"},"fix":{"range":[1231,1254],"text":""},"desc":"Remove unused variable 'userPassword'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import prisma from \"../lib/prisma.js\";\nimport bcrypt from \"bcrypt\";\n\nexport const getUsers = async (req, res) => {\n  try {\n    const users = await prisma.user.findMany();\n    res.status(200).json(users);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to get users!\" });\n  }\n};\n\nexport const getUser = async (req, res) => {\n  const id = req.params.id;\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id },\n    });\n    res.status(200).json(user);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to get user!\" });\n  }\n};\n\nexport const updateUser = async (req, res) => {\n  const id = req.params.id;\n  const tokenUserId = req.userId;\n  const { password, avatar, ...inputs } = req.body;\n\n  if (id !== tokenUserId) {\n    return res.status(403).json({ message: \"Not Authorized!\" });\n  }\n\n  let updatedPassword = null;\n  try {\n    if (password) {\n      updatedPassword = await bcrypt.hash(password, 10);\n    }\n\n    const updatedUser = await prisma.user.update({\n      where: { id },\n      data: {\n        ...inputs,\n        ...(updatedPassword && { password: updatedPassword }),\n        ...(avatar && { avatar }),\n      },\n    });\n\n    const { password: userPassword, ...rest } = updatedUser;\n\n    res.status(200).json(rest);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to update users!\" });\n  }\n};\n\nexport const deleteUser = async (req, res) => {\n  const id = req.params.id;\n  const tokenUserId = req.userId;\n\n  if (id !== tokenUserId) {\n    return res.status(403).json({ message: \"Not Authorized!\" });\n  }\n\n  try {\n    await prisma.user.delete({\n      where: { id },\n    });\n    res.status(200).json({ message: \"User deleted\" });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to delete users!\" });\n  }\n};\n\nexport const savePost = async (req, res) => {\n  const postId = req.body.postId;\n  const tokenUserId = req.userId;\n\n  try {\n    const savedPost = await prisma.savedPost.findUnique({\n      where: {\n        userId_postId: {\n          userId: tokenUserId,\n          postId,\n        },\n      },\n    });\n\n    if (savedPost) {\n      await prisma.savedPost.delete({\n        where: {\n          id: savedPost.id,\n        },\n      });\n      res.status(200).json({ message: \"Post removed from saved list\" });\n    } else {\n      await prisma.savedPost.create({\n        data: {\n          userId: tokenUserId,\n          postId,\n        },\n      });\n      res.status(200).json({ message: \"Post saved\" });\n    }\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to delete users!\" });\n  }\n};\n\nexport const profilePosts = async (req, res) => {\n  const tokenUserId = req.userId;\n  try {\n    const userPosts = await prisma.post.findMany({\n      where: { userId: tokenUserId },\n    });\n    const saved = await prisma.savedPost.findMany({\n      where: { userId: tokenUserId },\n      include: {\n        post: true,\n      },\n    });\n\n    const savedPosts = saved.map((item) => item.post);\n    res.status(200).json({ userPosts, savedPosts });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to get profile posts!\" });\n  }\n};\n\nexport const getNotificationNumber = async (req, res) => {\n  const tokenUserId = req.userId;\n  try {\n    const number = await prisma.chat.count({\n      where: {\n        userIDs: {\n          hasSome: [tokenUserId],\n        },\n        NOT: {\n          seenBy: {\n            hasSome: [tokenUserId],\n          },\n        },\n      },\n    });\n    res.status(200).json(number);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({ message: \"Failed to get profile posts!\" });\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/lib/prisma.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/middleware/verifyToken.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":8,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jwt from \"jsonwebtoken\";\n\nexport const verifyToken = (req, res, next) => {\n  const token = req.cookies.token;\n\n  if (!token) return res.status(401).json({ message: \"Not Authenticated!\" });\n\n  jwt.verify(token, process.env.JWT_SECRET_KEY, async (err, payload) => {\n    if (err) return res.status(403).json({ message: \"Token is not Valid!\" });\n    req.userId = payload.id;\n\n    next();\n  });\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/routes/auth.route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/routes/chat.route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/routes/message.route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/routes/post.route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/routes/test.route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abhi/Abhi/PaceUniversity/CS691/cs691-HouseHunt-team1/api/routes/user.route.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getUser' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"getUser"},"fix":{"range":[52,63],"text":""},"desc":"Remove unused variable 'getUser'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from \"express\";\nimport {\n  deleteUser,\n  getUser,\n  getUsers,\n  updateUser,\n  savePost,\n  profilePosts,\n  getNotificationNumber\n} from \"../controllers/user.controller.js\";\nimport {verifyToken} from \"../middleware/verifyToken.js\";\n\nconst router = express.Router();\n\nrouter.get(\"/\", getUsers);\n// router.get(\"/search/:id\", verifyToken, getUser);\nrouter.put(\"/:id\", verifyToken, updateUser);\nrouter.delete(\"/:id\", verifyToken, deleteUser);\nrouter.post(\"/save\", verifyToken, savePost);\nrouter.get(\"/profilePosts\", verifyToken, profilePosts);\nrouter.get(\"/notification\", verifyToken, getNotificationNumber);\n\nexport default router;\n","usedDeprecatedRules":[]}]