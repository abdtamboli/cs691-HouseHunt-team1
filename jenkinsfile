pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '314146332315'

        // Repositories
        CLIENT_REPO = 'househunt'
        API_REPO = 'househunt-api'
        SOCKET_REPO = 'socket-service'

        IMAGE_TAG = 'latest'

        // Target EC2 (Dev) server IP
        EC2_PUBLIC_IP = "44.212.29.69"

        // Secrets and paths
        SSH_PRIVATE_KEY_PATH = "/var/jenkins_home/.ssh/jenkins-key.pem"
        SLACK_WEBHOOK_URL = "https://hooks.slack.com/services/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"
    }

    stages {
        stage('Checkout Repository') {
            steps {
                checkout scm
            }
        }

        stage('Run NPM Tests (If Available)') {
            steps {
                script {
                    sh """
                    cd client
                    if [ -f package.json ] && grep -q '"test"' package.json; then
                        npm install
                        npm test
                    else
                        echo "No NPM tests found, skipping..."
                    fi
                    """
                }
            }
        }

        stage('Build and Push Client Docker Image') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        def client_image = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLIENT_REPO}:${IMAGE_TAG}"

                        sh """
                        cd client
                        docker build -t ${client_image} .
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        docker push ${client_image}
                        """
                    }
                }
            }
        }

        stage('Build and Push API Docker Image') {
            steps {
                withCredentials([
                    file(credentialsId: 'api-env-file', variable: 'ENV_FILE'),
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']
                ]) {
                    script {
                        def api_image = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${API_REPO}:${IMAGE_TAG}"

                        sh """
                        cd api
                        cat \$ENV_FILE | sed 's|CLIENT_URL=.*|CLIENT_URL=http://${EC2_PUBLIC_IP}|' > temp_env
                        mv temp_env .env

                        docker build -t ${api_image} .
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        docker push ${api_image}
                        """
                    }
                }
            }
        }

        stage('Build and Push Socket Docker Image') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        def socket_image = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SOCKET_REPO}:${IMAGE_TAG}"

                        sh """
                        cd socket
                        docker build -t ${socket_image} .
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        docker push ${socket_image}
                        """
                    }
                }
            }
        }

        stage('Update Ansible Inventory') {
            steps {
                script {
                    sh """
                    echo "[frontend]" > ansible/inventory
                    echo "${EC2_PUBLIC_IP} ansible_user=ubuntu ansible_ssh_private_key_file=${SSH_PRIVATE_KEY_PATH}" >> ansible/inventory
                    """
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        sh """
                        export ANSIBLE_HOST_KEY_CHECKING=False
                        ssh-keyscan -H ${EC2_PUBLIC_IP} >> /var/jenkins_home/.ssh/known_hosts
                        ansible-playbook -i ansible/inventory ansible/deploy.yml \
                        --extra-vars "docker_image_version=latest"
                        """
                    }
                }
            }
        }
    }

   /* post {
        success {
            script {
                sh """
                curl -X POST -H 'Content-type: application/json' --data '{
                    "text": "‚úÖ *Build SUCCESS* üöÄ\\n*Branch:* ${GIT_BRANCH} \\n*Job:* ${JOB_NAME} \\n*Build Number:* ${BUILD_NUMBER} \\n*Server:* http://${EC2_PUBLIC_IP}/"
                }' ${SLACK_WEBHOOK_URL}
                """
            }
        }
        failure {
            script {
                sh """
                curl -X POST -H 'Content-type: application/json' --data '{
                    "text": "‚ùå *Build FAILED* ‚ùó\\n*Branch:* ${GIT_BRANCH} \\n*Job:* ${JOB_NAME} \\n*Build Number:* ${BUILD_NUMBER} \\nCheck Jenkins Logs for more details."
                }' ${SLACK_WEBHOOK_URL}
                """
            }
        }
    }*/
}